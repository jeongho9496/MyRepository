<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
<!-- 0928 -->
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven /><!-- 어노테이션을 사용하기 위해 이클립스에 필요하다고 전달. 필수적으로 들어가야 됨 -->
	<!-- annotation-driven이 있어야 component를 사용할수 있다. -->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<!-- mapping="/resources/**" => 형식지정(고정) location="/resources/" => 물리적 파일명(변경가능) -->

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"><!-- ViewResolver: 뷰해결자 -->
		<beans:property name="prefix" value="/WEB-INF/views/" /><!-- 파일 앞에 오는것 setPrefix("/WEB-INF/views/"); -->
		<beans:property name="suffix" value=".jsp" />			<!-- 파일 형식 지정 setSuffix(".jsp"); -->
	</beans:bean><!-- 전체 JSP의 경로를 만들어줌,예약된 이름이 있으므로 name지정안함, beans:bean=>관리객체로 만들어줌 -->
	
	<context:component-scan base-package="com.mycompany.myapp" />
	<!-- component : Spring이 관리해야할 객체 @Controller를 base-package 안에서 찾음 -->
	<!-- base-package 밖의 패키지는 검색을 못한다. -->
	
	<!-- 1006 -->
	<!-- 관리 객체 생성 -->
	<beans:bean name="aObj" class="com.mycompany.myapp.exam09.A"/>
	<beans:bean name="bObj" class="com.mycompany.myapp.exam09.B"/>
	<beans:bean name="serviceAObj" class="com.mycompany.myapp.exam09.ServiceA"/>
	<beans:bean name="serviceBObj" class="com.mycompany.myapp.exam09.ServiceB"/>
	<beans:bean name="serviceCImpl1Obj" class="com.mycompany.myapp.exam09.ServiceCImpl1"/>
	<beans:bean name="serviceDImpl" class="com.mycompany.myapp.exam09.ServiceDImpl2"/>
	
	<!-- 1007 -->
	<!-- 관리 객체 생성 -->
	<beans:bean name="dObj" class="com.mycompany.myapp.exam09.D"/><!-- 생성자 매개값으로 전달할 관리객체D 생성 -->
	<beans:bean name="cObj" class="com.mycompany.myapp.exam09.C">
		<beans:constructor-arg ref="dObj"/><!-- beans:constructor-arg =>생성자 매개변수 받기 , C생성자의 매개값으로 전달 -->
	</beans:bean>
	
	<beans:bean name="eObj" class="com.mycompany.myapp.exam09.E">
		<beans:constructor-arg ref="bObj"/>
		<beans:constructor-arg ref="dObj"/>
	</beans:bean>
	
	<beans:bean name="fObj" class="com.mycompany.myapp.exam09.F">
		<beans:constructor-arg ref="serviceAObj"/>
		<beans:constructor-arg ref="serviceBObj"/>
		<beans:constructor-arg ref="serviceCImpl1Obj"/>
	</beans:bean>
	
	<!-- Exam09Controller 컨트롤러 객체를 찾아 가져오기 ->이미 만들어진 객체를 가져오기(없으면 관리객체로 생성) -->
	<!-- 동일한 객체를 2개 이상 만들지 않는다 무조건 하나만 만들어 공유해서 사용한다. -->
	<beans:bean name="exam09Controller" class="com.mycompany.myapp.exam09.Exam09Controller">
		<!-- setter 주입(beans:property) -->
		<beans:property name="a" ref="aObj"/> 
		<beans:property name="b" ref="bObj"/>
		<beans:property name="serviceA" ref="serviceAObj"/>
		<beans:property name="serviceB" ref="serviceBObj"/>
		<!-- 인터페이스 주입 -->
		<beans:property name="serviceC" ref="serviceCImpl1Obj"/>
		<beans:property name="serviceD" ref="serviceDImpl"/>
		<!-- name="setter이름" setter메소드(set때고 첫글자 소문자로 한 이름) 이름이 온다. ref = "setter매개값으로 전달한 객체(관리객체이름)" -> 해당 관리객체를 setter메소드에 참조한다. -->
		<!-- 값을 매개변수로 받고 싶은 경우 ref="~"가 아닌 value="~"로 대입한다. -->
		
		<!-- 1007 -->
		<beans:property name="c" ref="cObj"/>
		<beans:property name="e" ref="eObj"/>
		<beans:property name="f" ref="fObj"/>
	</beans:bean>
	
	<!-- 1024 -->
	<!-- Connection Pool => 하나의 객체-->
	<beans:bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<beans:property name="driverClass" value="oracle.jdbc.OracleDriver"/>
		<beans:property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:orcl"/>
		<beans:property name="user" value="tester1"/>
		<beans:property name="password" value="kosa12345"/>
		<beans:property name="maxPoolSize" value="3"/><!-- connection pool 만들 최대 개수 -->
		<beans:property name="initialPoolSize" value="1"/><!-- 처음에 애플리케이션이 배치될 때 만들어 질 connection pool개수 -->
		<beans:property name="acquireIncrement" value="1"/><!-- initialPoolSize가 다 사용될때 얼마나 connection pool을 몇개 증가할것인지  -->
		<beans:property name="minPoolSize" value="1"/><!-- 실행도중 몇개를 남겨두고 지울 것인지 --> 
	</beans:bean>
	<!-- <beans:bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<beans:property name="driverClass" value="oracle.jdbc.OracleDriver"/>
		<beans:property name="jdbcUrl" value="jdbc:oracle:thin:@106.253.56.123:1521:orcl"/>
		<beans:property name="user" value="kosauser2"/>
		<beans:property name="password" value="kosa12345"/>
		<beans:property name="maxPoolSize" value="3"/>
		<beans:property name="initialPoolSize" value="1"/>
		<beans:property name="acquireIncrement" value="1"/> 
		<beans:property name="minPoolSize" value="1"/>
	</beans:bean> -->
	
	<!-- 1025 -->
	<!-- <jee:jndi-lookup id="dataSource" jndi-name="jdbc/orcl"/> --><!-- java naming and directory interface 객체를 찾아 해당id 이름 으로 등록해서 spring객체로 만든다.-->
	<!-- JdbcTemplate 객체 생성 -->
	<beans:bean name="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="dataSource"/><!-- name="dataSource"=>setter이름 ref="dataSource"=>connection이름 -->
	</beans:bean><!-- spring에서만 사용가능 -->

</beans:beans>
